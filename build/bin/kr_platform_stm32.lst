
/media/kienlb/kr_hdd/embedded_programming/kr_firmware_stm32/kr_firmware_stm32f0/build/bin/kr_platform_stm32.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080000c4 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000004 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /media/kienlb/kr_hdd/embedded_programming/kr_firmware_stm32/kr_firmware_stm32f0/build/obj/startup_stm32f0xx.o
f108f85f l       *ABS*	00000000 BootRAM
080002b4 l       .text	00000000 LoopCopyDataInit
080002ac l       .text	00000000 CopyDataInit
080002c8 l       .text	00000000 LoopFillZerobss
080002c2 l       .text	00000000 FillZerobss
080002da l       .text	00000000 LoopForever
080002f4 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 _udivsi3.o
080000c8 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 main.c
20000004 l     O .bss	00000002 tick.5867
00000000 l    df *ABS*	00000000 system_stm32f0xx.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.8.2/armv6-m/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.8.2/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 
20000008 l       .bss	00000000 __exidx_end
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 malloc
00000000 l       *UND*	00000000 __bss_start__
20000008 l       .bss	00000000 __exidx_start
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 _ITM_registerTMCloneTable
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 _ITM_deregisterTMCloneTable
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 _exit
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
00000000 l       *UND*	00000000 free
080002f4  w    F .text	00000002 TIM1_CC_IRQHandler
080002f4  w    F .text	00000002 HardFault_Handler
080002f4  w    F .text	00000002 ADC1_COMP_IRQHandler
08000164 g     F .text	0000002c SysTick_Handler
080002f4  w    F .text	00000002 PVD_IRQHandler
08000358 g       .text	00000000 _sidata
080002f4  w    F .text	00000002 PendSV_Handler
080002f4  w    F .text	00000002 NMI_Handler
080002f4  w    F .text	00000002 I2C1_IRQHandler
08000358 g       .text	00000000 _etext
20000004 g       .bss	00000000 _sbss
20000000 g     O .data	00000004 SystemCoreClock
080000c4 g     F .text	00000088 .hidden __udivsi3
20000000 g       .data	00000000 _sdata
080002f4  w    F .text	00000002 SPI1_IRQHandler
080002f4  w    F .text	00000002 TIM6_DAC_IRQHandler
080002f8 g     F .text	00000048 __libc_init_array
080002f4  w    F .text	00000002 EXTI2_3_IRQHandler
08000340 g     F .text	00000000 _init
080002f4  w    F .text	00000002 I2C2_IRQHandler
080002f4  w    F .text	00000002 TIM17_IRQHandler
080002f4  w    F .text	00000002 RTC_IRQHandler
20000008 g       .bss	00000000 _ebss
080002a4  w    F .text	00000038 Reset_Handler
080002f4  w    F .text	00000002 TIM16_IRQHandler
080002f4  w    F .text	00000002 TIM3_IRQHandler
080002f4  w    F .text	00000002 EXTI4_15_IRQHandler
080002f4  w    F .text	00000002 RCC_IRQHandler
20000004 g       .bss	00000000 _bss
080002f4  w    F .text	00000002 DMA1_Channel1_IRQHandler
080002f4 g       .text	00000002 Default_Handler
080002f4  w    F .text	00000002 CEC_IRQHandler
080002f4  w    F .text	00000002 TIM14_IRQHandler
080002f4  w    F .text	00000002 DMA1_Channel4_5_IRQHandler
080002f4  w    F .text	00000002 TIM15_IRQHandler
080002f4  w    F .text	00000002 EXTI0_1_IRQHandler
08000160  w    F .text	00000002 .hidden __aeabi_ldiv0
080002f4  w    F .text	00000002 SPI2_IRQHandler
08000190 g     F .text	00000060 main
080000c4 g     F .text	00000000 .hidden __aeabi_uidiv
080002f4  w    F .text	00000002 SVC_Handler
00000000  w      *UND*	00000000 __init_array_end
080001f0 g     F .text	000000b4 SystemInit
0800034c g     F .text	00000000 _fini
080002f4  w    F .text	00000002 TS_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_end
080002f4  w    F .text	00000002 WWDG_IRQHandler
20000000 g       .data	00000000 _data
080002f4  w    F .text	00000002 TIM2_IRQHandler
080002f4  w    F .text	00000002 DMA1_Channel2_3_IRQHandler
20002000 g       *ABS*	00000000 _estack
0800014c g     F .text	00000012 .hidden __aeabi_uidivmod
20000004 g       .data	00000000 _edata
080002f4  w    F .text	00000002 USART2_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
00000000  w      *UND*	00000000 __init_array_start
08000160  w    F .text	00000002 .hidden __aeabi_idiv0
080002f4  w    F .text	00000002 FLASH_IRQHandler
080002f4  w    F .text	00000002 USART1_IRQHandler
080002f4  w    F .text	00000002 TIM1_BRK_UP_TRG_COM_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_start



Disassembly of section .text:

080000c4 <__aeabi_uidiv>:
 80000c4:	2900      	cmp	r1, #0
 80000c6:	d034      	beq.n	8000132 <.udivsi3_skip_div0_test+0x6a>

080000c8 <.udivsi3_skip_div0_test>:
 80000c8:	2301      	movs	r3, #1
 80000ca:	2200      	movs	r2, #0
 80000cc:	b410      	push	{r4}
 80000ce:	4288      	cmp	r0, r1
 80000d0:	d32c      	bcc.n	800012c <.udivsi3_skip_div0_test+0x64>
 80000d2:	2401      	movs	r4, #1
 80000d4:	0724      	lsls	r4, r4, #28
 80000d6:	42a1      	cmp	r1, r4
 80000d8:	d204      	bcs.n	80000e4 <.udivsi3_skip_div0_test+0x1c>
 80000da:	4281      	cmp	r1, r0
 80000dc:	d202      	bcs.n	80000e4 <.udivsi3_skip_div0_test+0x1c>
 80000de:	0109      	lsls	r1, r1, #4
 80000e0:	011b      	lsls	r3, r3, #4
 80000e2:	e7f8      	b.n	80000d6 <.udivsi3_skip_div0_test+0xe>
 80000e4:	00e4      	lsls	r4, r4, #3
 80000e6:	42a1      	cmp	r1, r4
 80000e8:	d204      	bcs.n	80000f4 <.udivsi3_skip_div0_test+0x2c>
 80000ea:	4281      	cmp	r1, r0
 80000ec:	d202      	bcs.n	80000f4 <.udivsi3_skip_div0_test+0x2c>
 80000ee:	0049      	lsls	r1, r1, #1
 80000f0:	005b      	lsls	r3, r3, #1
 80000f2:	e7f8      	b.n	80000e6 <.udivsi3_skip_div0_test+0x1e>
 80000f4:	4288      	cmp	r0, r1
 80000f6:	d301      	bcc.n	80000fc <.udivsi3_skip_div0_test+0x34>
 80000f8:	1a40      	subs	r0, r0, r1
 80000fa:	431a      	orrs	r2, r3
 80000fc:	084c      	lsrs	r4, r1, #1
 80000fe:	42a0      	cmp	r0, r4
 8000100:	d302      	bcc.n	8000108 <.udivsi3_skip_div0_test+0x40>
 8000102:	1b00      	subs	r0, r0, r4
 8000104:	085c      	lsrs	r4, r3, #1
 8000106:	4322      	orrs	r2, r4
 8000108:	088c      	lsrs	r4, r1, #2
 800010a:	42a0      	cmp	r0, r4
 800010c:	d302      	bcc.n	8000114 <.udivsi3_skip_div0_test+0x4c>
 800010e:	1b00      	subs	r0, r0, r4
 8000110:	089c      	lsrs	r4, r3, #2
 8000112:	4322      	orrs	r2, r4
 8000114:	08cc      	lsrs	r4, r1, #3
 8000116:	42a0      	cmp	r0, r4
 8000118:	d302      	bcc.n	8000120 <.udivsi3_skip_div0_test+0x58>
 800011a:	1b00      	subs	r0, r0, r4
 800011c:	08dc      	lsrs	r4, r3, #3
 800011e:	4322      	orrs	r2, r4
 8000120:	2800      	cmp	r0, #0
 8000122:	d003      	beq.n	800012c <.udivsi3_skip_div0_test+0x64>
 8000124:	091b      	lsrs	r3, r3, #4
 8000126:	d001      	beq.n	800012c <.udivsi3_skip_div0_test+0x64>
 8000128:	0909      	lsrs	r1, r1, #4
 800012a:	e7e3      	b.n	80000f4 <.udivsi3_skip_div0_test+0x2c>
 800012c:	1c10      	adds	r0, r2, #0
 800012e:	bc10      	pop	{r4}
 8000130:	4770      	bx	lr
 8000132:	2800      	cmp	r0, #0
 8000134:	d001      	beq.n	800013a <.udivsi3_skip_div0_test+0x72>
 8000136:	2000      	movs	r0, #0
 8000138:	43c0      	mvns	r0, r0
 800013a:	b407      	push	{r0, r1, r2}
 800013c:	4802      	ldr	r0, [pc, #8]	; (8000148 <.udivsi3_skip_div0_test+0x80>)
 800013e:	a102      	add	r1, pc, #8	; (adr r1, 8000148 <.udivsi3_skip_div0_test+0x80>)
 8000140:	1840      	adds	r0, r0, r1
 8000142:	9002      	str	r0, [sp, #8]
 8000144:	bd03      	pop	{r0, r1, pc}
 8000146:	46c0      	nop			; (mov r8, r8)
 8000148:	00000019 	.word	0x00000019

0800014c <__aeabi_uidivmod>:
 800014c:	2900      	cmp	r1, #0
 800014e:	d0f0      	beq.n	8000132 <.udivsi3_skip_div0_test+0x6a>
 8000150:	b503      	push	{r0, r1, lr}
 8000152:	f7ff ffb9 	bl	80000c8 <.udivsi3_skip_div0_test>
 8000156:	bc0e      	pop	{r1, r2, r3}
 8000158:	4342      	muls	r2, r0
 800015a:	1a89      	subs	r1, r1, r2
 800015c:	4718      	bx	r3
 800015e:	46c0      	nop			; (mov r8, r8)

08000160 <__aeabi_idiv0>:
 8000160:	4770      	bx	lr
 8000162:	46c0      	nop			; (mov r8, r8)

08000164 <SysTick_Handler>:
#include "stm32f0xx_conf.h"

void SysTick_Handler(void) {
  static uint16_t tick = 0;

  switch (tick++) {
 8000164:	4b08      	ldr	r3, [pc, #32]	; (8000188 <SysTick_Handler+0x24>)
 8000166:	881a      	ldrh	r2, [r3, #0]
 8000168:	2a64      	cmp	r2, #100	; 0x64
 800016a:	d002      	beq.n	8000172 <SysTick_Handler+0xe>
 800016c:	3201      	adds	r2, #1
 800016e:	801a      	strh	r2, [r3, #0]
 8000170:	e008      	b.n	8000184 <SysTick_Handler+0x20>
  	case 100:
  		tick = 0;
 8000172:	2200      	movs	r2, #0
 8000174:	801a      	strh	r2, [r3, #0]
  		GPIOC->ODR ^= (1 << 8);
 8000176:	4b05      	ldr	r3, [pc, #20]	; (800018c <SysTick_Handler+0x28>)
 8000178:	2280      	movs	r2, #128	; 0x80
 800017a:	6959      	ldr	r1, [r3, #20]
 800017c:	0052      	lsls	r2, r2, #1
 800017e:	b289      	uxth	r1, r1
 8000180:	404a      	eors	r2, r1
 8000182:	829a      	strh	r2, [r3, #20]
  		break;
  }
}
 8000184:	4770      	bx	lr
 8000186:	46c0      	nop			; (mov r8, r8)
 8000188:	20000004 	.word	0x20000004
 800018c:	48000800 	.word	0x48000800

08000190 <main>:

int main(void)
{
 8000190:	b508      	push	{r3, lr}

	RCC->AHBENR |= RCC_AHBENR_GPIOCEN; 	// enable the clock to GPIOC
 8000192:	4b11      	ldr	r3, [pc, #68]	; (80001d8 <main+0x48>)
 8000194:	2280      	movs	r2, #128	; 0x80
 8000196:	6959      	ldr	r1, [r3, #20]
 8000198:	0312      	lsls	r2, r2, #12
 800019a:	430a      	orrs	r2, r1
 800019c:	615a      	str	r2, [r3, #20]
						//(RM0091 lists this as IOPCEN, not GPIOCEN)

	GPIOC->MODER = (1 << 16);
 800019e:	4b0f      	ldr	r3, [pc, #60]	; (80001dc <main+0x4c>)
 80001a0:	2280      	movs	r2, #128	; 0x80
 80001a2:	0252      	lsls	r2, r2, #9
 80001a4:	601a      	str	r2, [r3, #0]

	SysTick_Config(SystemCoreClock/100);
 80001a6:	4b0e      	ldr	r3, [pc, #56]	; (80001e0 <main+0x50>)
 80001a8:	2164      	movs	r1, #100	; 0x64
 80001aa:	6818      	ldr	r0, [r3, #0]
 80001ac:	f7ff ff8a 	bl	80000c4 <__aeabi_uidiv>
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80001b0:	4b0c      	ldr	r3, [pc, #48]	; (80001e4 <main+0x54>)
 80001b2:	4298      	cmp	r0, r3
 80001b4:	d900      	bls.n	80001b8 <main+0x28>
 80001b6:	e7fe      	b.n	80001b6 <main+0x26>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80001b8:	4b0b      	ldr	r3, [pc, #44]	; (80001e8 <main+0x58>)
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80001ba:	4a0c      	ldr	r2, [pc, #48]	; (80001ec <main+0x5c>)
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80001bc:	3801      	subs	r0, #1
 80001be:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80001c0:	6a10      	ldr	r0, [r2, #32]
 80001c2:	21c0      	movs	r1, #192	; 0xc0
 80001c4:	0200      	lsls	r0, r0, #8
 80001c6:	0a00      	lsrs	r0, r0, #8
 80001c8:	0609      	lsls	r1, r1, #24
 80001ca:	4301      	orrs	r1, r0
 80001cc:	6211      	str	r1, [r2, #32]
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001ce:	2200      	movs	r2, #0
 80001d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001d2:	2207      	movs	r2, #7
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	e7ee      	b.n	80001b6 <main+0x26>
 80001d8:	40021000 	.word	0x40021000
 80001dc:	48000800 	.word	0x48000800
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00ffffff 	.word	0x00ffffff
 80001e8:	e000e010 	.word	0xe000e010
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001f0:	4b25      	ldr	r3, [pc, #148]	; (8000288 <SystemInit+0x98>)
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 80001f2:	b513      	push	{r0, r1, r4, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001f4:	6819      	ldr	r1, [r3, #0]
 80001f6:	2201      	movs	r2, #1
 80001f8:	4311      	orrs	r1, r2
 80001fa:	6019      	str	r1, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 80001fc:	6858      	ldr	r0, [r3, #4]
 80001fe:	4923      	ldr	r1, [pc, #140]	; (800028c <SystemInit+0x9c>)

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000200:	240f      	movs	r4, #15
{    
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8000202:	4001      	ands	r1, r0
 8000204:	6059      	str	r1, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000206:	6818      	ldr	r0, [r3, #0]
 8000208:	4921      	ldr	r1, [pc, #132]	; (8000290 <SystemInit+0xa0>)
 800020a:	4001      	ands	r1, r0
 800020c:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800020e:	6818      	ldr	r0, [r3, #0]
 8000210:	4920      	ldr	r1, [pc, #128]	; (8000294 <SystemInit+0xa4>)
 8000212:	4001      	ands	r1, r0
 8000214:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000216:	6858      	ldr	r0, [r3, #4]
 8000218:	491f      	ldr	r1, [pc, #124]	; (8000298 <SystemInit+0xa8>)
 800021a:	4008      	ands	r0, r1
 800021c:	6058      	str	r0, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800021e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000220:	43a0      	bics	r0, r4
 8000222:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8000224:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8000226:	481d      	ldr	r0, [pc, #116]	; (800029c <SystemInit+0xac>)
 8000228:	4020      	ands	r0, r4
 800022a:	6318      	str	r0, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800022c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800022e:	4390      	bics	r0, r2

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000230:	2200      	movs	r2, #0

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000232:	6358      	str	r0, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000234:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000236:	9200      	str	r2, [sp, #0]
 8000238:	9201      	str	r2, [sp, #4]
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 800023a:	4a19      	ldr	r2, [pc, #100]	; (80002a0 <SystemInit+0xb0>)
 800023c:	2011      	movs	r0, #17
 800023e:	6010      	str	r0, [r2, #0]
 
  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000240:	685a      	ldr	r2, [r3, #4]
 8000242:	605a      	str	r2, [r3, #4]
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8000244:	685a      	ldr	r2, [r3, #4]
 8000246:	605a      	str	r2, [r3, #4]

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8000248:	685a      	ldr	r2, [r3, #4]
 800024a:	4011      	ands	r1, r2
 800024c:	6059      	str	r1, [r3, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 800024e:	6859      	ldr	r1, [r3, #4]
 8000250:	22a0      	movs	r2, #160	; 0xa0
 8000252:	0392      	lsls	r2, r2, #14
 8000254:	430a      	orrs	r2, r1
 8000256:	605a      	str	r2, [r3, #4]
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000258:	6819      	ldr	r1, [r3, #0]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	4082      	lsls	r2, r0
 800025e:	430a      	orrs	r2, r1
 8000260:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000262:	6819      	ldr	r1, [r3, #0]
 8000264:	4a08      	ldr	r2, [pc, #32]	; (8000288 <SystemInit+0x98>)
 8000266:	0188      	lsls	r0, r1, #6
 8000268:	d5fb      	bpl.n	8000262 <SystemInit+0x72>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800026a:	6851      	ldr	r1, [r2, #4]
 800026c:	2003      	movs	r0, #3
 800026e:	4381      	bics	r1, r0
 8000270:	6051      	str	r1, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000272:	6851      	ldr	r1, [r2, #4]
 8000274:	2002      	movs	r0, #2
 8000276:	4301      	orrs	r1, r0
 8000278:	6051      	str	r1, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800027a:	6859      	ldr	r1, [r3, #4]
 800027c:	220c      	movs	r2, #12
 800027e:	400a      	ands	r2, r1
 8000280:	2a08      	cmp	r2, #8
 8000282:	d1fa      	bne.n	800027a <SystemInit+0x8a>
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
}
 8000284:	bd13      	pop	{r0, r1, r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	40021000 	.word	0x40021000
 800028c:	f8ffb80c 	.word	0xf8ffb80c
 8000290:	fef6ffff 	.word	0xfef6ffff
 8000294:	fffbffff 	.word	0xfffbffff
 8000298:	ffc0ffff 	.word	0xffc0ffff
 800029c:	fffffeac 	.word	0xfffffeac
 80002a0:	40022000 	.word	0x40022000

080002a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a4:	480d      	ldr	r0, [pc, #52]	; (80002dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80002a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80002aa:	e003      	b.n	80002b4 <LoopCopyDataInit>

080002ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80002ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80002b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80002b2:	3104      	adds	r1, #4

080002b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80002b4:	480b      	ldr	r0, [pc, #44]	; (80002e4 <LoopForever+0xa>)
  ldr r3, =_edata
 80002b6:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <LoopForever+0xe>)
  adds r2, r0, r1
 80002b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80002ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80002bc:	d3f6      	bcc.n	80002ac <CopyDataInit>
  ldr r2, =_sbss
 80002be:	4a0b      	ldr	r2, [pc, #44]	; (80002ec <LoopForever+0x12>)
  b LoopFillZerobss
 80002c0:	e002      	b.n	80002c8 <LoopFillZerobss>

080002c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  str  r3, [r2]
 80002c4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c6:	3204      	adds	r2, #4

080002c8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <LoopForever+0x16>)
  cmp r2, r3
 80002ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80002cc:	d3f9      	bcc.n	80002c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002ce:	f7ff ff8f 	bl	80001f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002d2:	f000 f811 	bl	80002f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d6:	f7ff ff5b 	bl	8000190 <main>

080002da <LoopForever>:
  
LoopForever:
    b LoopForever
 80002da:	e7fe      	b.n	80002da <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002dc:	20002000 	.word	0x20002000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80002e0:	08000358 	.word	0x08000358
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80002e8:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80002ec:	20000004 	.word	0x20000004
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 80002f0:	20000008 	.word	0x20000008

080002f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC1_COMP_IRQHandler>
	...

080002f8 <__libc_init_array>:
 80002f8:	b570      	push	{r4, r5, r6, lr}
 80002fa:	4e0d      	ldr	r6, [pc, #52]	; (8000330 <__libc_init_array+0x38>)
 80002fc:	4d0d      	ldr	r5, [pc, #52]	; (8000334 <__libc_init_array+0x3c>)
 80002fe:	2400      	movs	r4, #0
 8000300:	1bad      	subs	r5, r5, r6
 8000302:	10ad      	asrs	r5, r5, #2
 8000304:	d005      	beq.n	8000312 <__libc_init_array+0x1a>
 8000306:	00a3      	lsls	r3, r4, #2
 8000308:	58f3      	ldr	r3, [r6, r3]
 800030a:	3401      	adds	r4, #1
 800030c:	4798      	blx	r3
 800030e:	42a5      	cmp	r5, r4
 8000310:	d1f9      	bne.n	8000306 <__libc_init_array+0xe>
 8000312:	f000 f815 	bl	8000340 <_init>
 8000316:	4e08      	ldr	r6, [pc, #32]	; (8000338 <__libc_init_array+0x40>)
 8000318:	4d08      	ldr	r5, [pc, #32]	; (800033c <__libc_init_array+0x44>)
 800031a:	2400      	movs	r4, #0
 800031c:	1bad      	subs	r5, r5, r6
 800031e:	10ad      	asrs	r5, r5, #2
 8000320:	d005      	beq.n	800032e <__libc_init_array+0x36>
 8000322:	00a3      	lsls	r3, r4, #2
 8000324:	58f3      	ldr	r3, [r6, r3]
 8000326:	3401      	adds	r4, #1
 8000328:	4798      	blx	r3
 800032a:	42a5      	cmp	r5, r4
 800032c:	d1f9      	bne.n	8000322 <__libc_init_array+0x2a>
 800032e:	bd70      	pop	{r4, r5, r6, pc}
	...

08000340 <_init>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr

0800034c <_fini>:
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000352:	bc08      	pop	{r3}
 8000354:	469e      	mov	lr, r3
 8000356:	4770      	bx	lr
